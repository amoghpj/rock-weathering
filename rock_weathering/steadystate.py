"""Author: Amogh Jalihal
Date: 2025-04-08
Commentary: Defines a four state ODE model of dual nutrient limitation.
The state variables are:
1. Cell density 
2. Free glucose concentration
3. Free iron concentration
4. Siderophore concentration

We use sympy to symbolic solve for the steady states of the
system. Since these expressions are inconvenient to manipulate by
hand, we create python functions automatically that return the analytical solutions given the model parameters.
"""
import os
import sys
from tqdm import tqdm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sympy as sm
sm.init_printing()

## Variables
Siderophore = sm.Symbol("Siderophore", positive = True)
Cell = sm.Symbol("Cell", positive = True)
Fe = sm.Symbol("Fe", positive = True)
Glucose = sm.Symbol("Glucose", positive = True)
## Parameters
D = sm.Symbol("D", positive = True)
mu_max = sm.Symbol("mu_max", positive = True)
K_m1 = sm.Symbol("K_m1", positive = True)
K_m2 = sm.Symbol("K_m2", positive = True)
K = sm.Symbol("K", positive = True)
Yfe = sm.Symbol("Y_fe", positive = True)
Yglc = sm.Symbol("Y_glc", positive = True)
Ysid = sm.Symbol("Y_sid", positive = True)
M = sm.Symbol("M", positive = True)
G0 = sm.Symbol("G0", positive = True)
R = sm.Symbol("R", positive = True)
## Terms
mu = mu_max*(Fe/(K_m1 + Fe))*(Glucose/(K_m2 + Glucose))


## Equations
dSiderophore = mu*Cell*(K*Ysid/(K + Fe)) - D*Siderophore
dCell = mu*Cell - D*Cell
dFe = M*R - mu*Cell*Yfe - D*Fe
dGlucose =G0*D - mu*Cell*Yglc - D*Glucose

def sanitize(s):
    return(s.replace("Cell","\\text{[Cell]} ")
           .replace("Siderophore","\\text{[Siderophore]} ")
           .replace("Fe","\\text{[Fe]} ")
           .replace("Glucose","\\text{[Glucose]} "))

with open("./model/dual_limitation_model.tex", "w") as outfile:
    outfile.write("\\begin{align}")
    outfile.write("\\frac{d\\text{Cell}}{dt} &=" + sanitize(sm.latex(dCell))\
                  + "\\\\\n\\frac{d\\text{Siderophore}}{dt} &="  + sanitize(sm.latex(dSiderophore))\
                  + "\\\\\n\\frac{d\\text{Fe}}{dt} &="  + sanitize(sm.latex(dFe))\
                  + "\\\\\n\\frac{d\\text{Glucose}}{dt} &="  + sanitize(sm.latex(dGlucose))\
                  + "\n\\end{align}")


Fess = sm.solvers.solve(dCell, Fe)[0]
Glcss = sm.solvers.solve(dGlucose.subs(Fe, Fess), Glucose)[0]
Cellss_soln = sm.solvers.solve(dFe.subs(Fe, Fess).subs(Glucose, Glcss), Cell)
Glc_final = sm.simplify(Glcss.subs(Cell, Cellss_soln[1]))
Fe_final = sm.simplify(Fess.subs(Glucose, Glc_final))
Siderophoress = sm.solvers.solve(dSiderophore, Siderophore)[0]\
                                 .subs(Fe, Fe_final)\
                                 .subs(Glucose, Glc_final)\
                                 .subs(Cell, Cellss_soln[1])
doSiddoD = sm.diff(Siderophoress, D)
doSiddoM = sm.diff(Siderophoress, M)
do2SiddoDdoM = sm.diff(doSiddoD, M)


"""
Write steady states to file
"""
with open("./model/dual_siderophore_independent_breakdown.py","w") as outfile:
    outfile.write('"""\nCODE AUTOGENERATED FROM ../src/steadystate.py\nDO NOT MODIFY BY HAND\n"""\n')
    outfile.write("from numpy import sqrt\n")
    outfile.write("def steadystate(D, M,mu_max,K_m1,K_m2,K,Y_fe,Y_glc,Y_sid,R,G0):\n"\
                  + '    """\n    Params:\n        D : dilution rate (hr-1)\n        M : mass of sand (g)\n        mu_max: max growth rate (hr-1)\n        K_m1: Monod constant for iron limited growth\n        K_m2 : Monod constant for glucose limited growth\n        K : inhibition constant of siderophore by iron (g/L)\n        Y_fe : cell yield from iron (g/g)\n        Y_glc : cell yield from glucose(g/g)\n        Y_sid : siderophore yield from cells (g/g)\n        R : basal sand breakdown rate (hr-1)\n        G0 : Glucose concentration in media reservoir\n    """\n' 
                  + "    Fess = " + str(Fe_final) + "\n"
                  + "    Glcss = " + str(Glc_final) + "\n"
                  + "    Cellss = " + str(Cellss_soln[1]) + "\n"
                  + "    Siderophoress = " + str(Siderophoress) + "\n"
                  + "    return(Fess, Glcss, Siderophoress, Cellss)\n\n")
             
    outfile.write("def mixedpartial(D, M,mu_max,K_m1,K_m2,K,Y_fe,Y_glc,Y_sid,R,G0):\n    return("\
                  + str(do2SiddoDdoM)\
                  + ")\n\n")
    outfile.write("def partialD(D, M,mu_max,K_m1,K_m2,K,Y_fe,Y_glc,Y_sid,R,G0):\n    return("\
                  + str(doSiddoD)\
                  + ")\n\n")
    outfile.write("def partialM(D, M,mu_max,K_m1,K_m2,K,Y_fe,Y_glc,Y_sid,R,G0):\n    return("\
                  + str(doSiddoM)\
                  + ")\n\n")
